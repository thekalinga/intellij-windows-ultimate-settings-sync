<templateSet group="user">
  <template name="__docker_compose_mysql" value="version: '3'&#10;&#10;services:&#10;  mysql:&#10;    image: mysql&#10;    environment:&#10;      MYSQL_ROOT_PASSWORD: password&#10;      MYSQL_DATABASE: todo&#10;      MYSQL_USER: user&#10;      MYSQL_PASSWORD: password&#10;    ports:&#10;      - 3306:3306" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="AsciiDoc" value="false" />
      <option name="Bash" value="false" />
      <option name="CPT" value="false" />
      <option name="GROOVY" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JSON" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MARKDOWN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="OTHER" value="true" />
      <option name="PL/SQL" value="false" />
      <option name="SCALA" value="false" />
      <option name="SPOCK_SPECIFICATION" value="false" />
      <option name="SQL" value="false" />
      <option name="SSP" value="false" />
      <option name="XML" value="false" />
      <option name="sbt" value="false" />
    </context>
  </template>
  <template name="__gradle_flyway_test" value="testCompile(&quot;org.flywaydb.flyway-test-extensions:flyway-spring5-test:${flywayTestExtensionVersion}&quot;)" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="GROOVY_EXPRESSION" value="true" />
      <option name="GROOVY_STATEMENT" value="true" />
    </context>
  </template>
  <template name="__junit_restdocs" value="private static User LOGGED_IN_USER =&#10;    User.builder().id(1).name(&quot;User&quot;).username(&quot;user&quot;).password(&quot;password&quot;)&#10;        .authorities(singletonList(Authority.builder().name(&quot;ROLE_USER&quot;).build())).build();&#10;&#10;// TODO: Add `.with(documentationAuthorizationCustomizer())` to your http request builder `MockHttpServletRequestBuilder`. For eg., post(&quot;/api/todos/{id}/markAsComplete&quot;, 1).with(documentationAuthorizationCustomizer()))&#10;// TODO: Add `@AutoConfigureRestDocs` on the test class &amp; also make sure to properly docment API methods, Request &amp; Response entities&#10;// TODO: If you have custom validations &amp; want these to appear in the generated documentation, make sure you add appropriate messages to a file named `org.springframework.restdocs.constraints/ConstraintDescriptions.properties`&#10;/**&#10; * Required by auto rest docs API to populate authorization snippet with correct values&#10; *&#10; * @return request with authorization header&#10; */&#10;private RequestPostProcessor documentationAuthorizationCustomizer() {&#10;  return request -&gt; {&#10;    if (SecurityContextHolder.getContext().getAuthentication().isAuthenticated()) {&#10;      request.addHeader(&quot;Authorization&quot;, &quot;Basic &quot; + Base64.getEncoder().encodeToString(&#10;          (LOGGED_IN_USER.getUsername() + &quot;:&quot; + LOGGED_IN_USER.getPassword()).getBytes()));&#10;      documentAuthorization(request, &quot;Basic authentication required&quot;);&#10;    }&#10;    return request;&#10;  };&#10;}&#10;&#10;&#10;// We need to customize default RestDocs such that we can use it with Auto RestDocs so that we get automatic sections that can be included in the code directly&#10;@TestConfiguration&#10;static class CustomizationConfiguration implements RestDocsMockMvcConfigurationCustomizer {&#10;&#10;  @Override&#10;  public void customize(MockMvcRestDocumentationConfigurer configurer) {&#10;    // Configuring snippets that gets generated by Spring RestDocs for each endpoint&#10;    List&lt;String&gt; defaultSnippets =&#10;        asList(AUTHORIZATION, PATH_PARAMETERS, REQUEST_PARAMETERS, REQUEST_FIELDS,&#10;            RESPONSE_FIELDS, HTTPIE_REQUEST, HTTP_RESPONSE);&#10;&#10;    configurer.snippets()&#10;        .withDefaults(httpieRequest(), httpRequest(), httpResponse(), requestFields(),&#10;            responseFields(), pathParameters(), requestParameters(), description(),&#10;            methodAndPath(),&#10;            sectionBuilder().snippetNames(defaultSnippets).skipEmpty(true).build(),&#10;            authorization(&quot;Resource is public&quot;));&#10;  }&#10;&#10;  // Configuring result handlers that help us transform result into a meaningful format. For eg., `replaceBinaryContent()` would replace actual binary response content with text `&lt;binary&gt;`&#10;  @Bean&#10;  public RestDocumentationResultHandler restDocumentation(ObjectMapper objectMapper) {&#10;    return document(&quot;{class-name}/{method-name}&quot;, preprocessRequest(),&#10;        preprocessResponse(replaceBinaryContent(), limitJsonArrayLength(objectMapper),&#10;            prettyPrint()));&#10;  }&#10;&#10;  // Will configure the correct object mapper that will be used by auto rest docs to generate metadata about rest endpoints from via `RequestMappingHandlerMethod`&#10;  @Bean&#10;  public MockMvcBuilderCustomizer prepareJacksonForAutoRestDocs(ObjectMapper objectMapper) {&#10;    return builder -&gt; builder.alwaysDo(prepareJackson(objectMapper));&#10;  }&#10;&#10;}" description="Addes @TestConfiguration required to configure rest docs for Junit" toReformat="true" toShortenFQNames="true" useStaticImport="true">
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="__junit_security" value="// TODO: Annotate your test with `@WithUserDetails`&#10;  @TestConfiguration&#10;  static class ResourceConfiguration {&#10;    @Bean&#10;    UserDetailsService userDetailsService() {&#10;      return username -&gt; LOGGED_IN_USER;&#10;    }&#10;  }" description="Adds required security configuration to start working with @WithUserDetails" toReformat="false" toShortenFQNames="true" useStaticImport="true">
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="tag" value="// tag::$name$[]&#10;// end::$name$[]" description="asciidoc tag start &amp; end" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="name" alwaysStopAt="true" />
    <context>
      <option name="GROOVY" value="true" />
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
</templateSet>